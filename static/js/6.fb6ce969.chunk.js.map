{"version":3,"sources":["components/content/login/login.js","components/content/login/loginContainer.js"],"names":["LoginForm","props","onSubmit","s","a","logInThunkCreator","email","password","rememberme","authError","validate","render","submitError","handleSubmit","submitting","form","pristine","values","createCustomField","Input","composeValidator","requiredField","maxLength","type","disabled","connect","isAuth","login","id","rest","to","LoginPage","this","React","Component","LoginContainer","compose","state"],"mappings":"6PAYIA,EAAY,SAACC,GAAD,OAAY,kBAAC,IAAD,iBACpBA,EADoB,CAExBC,SAAQ,uCAAE,WAAMC,GAAN,SAAAC,EAAA,sEACAH,EAAMI,kBAAkBF,EAAEG,MAAOH,EAAEI,SAAUJ,EAAEK,YAD/C,gCAECP,EAAMQ,WAFP,2CAAF,sDAURC,SAAU,aACVC,OAAQ,YAKkB,EALhBC,YAKiB,IAJbC,EAIY,EAJZA,aAEAC,GAEY,EAHZC,KAGY,EAFZD,YACAE,EACY,EADZA,SACY,EAAZC,OACV,OAAO,0BAAMf,SAAUW,GAElBK,YAAkB,QAASC,IAAO,aAC/BC,YAAiBC,YA1BX,mHA0B2CC,YAAU,GAzBpD,wHA2BVJ,YAAkB,WAAYC,IAAO,gBAClCC,YAAiBC,YA7BX,mHA6B2CC,YAAU,GA5BpD,uHA4B4E,YAEtFJ,YAAkB,aAAc,QAAS,KAAM,KAAM,WAAY,2DACjEjB,EAAMQ,UAAY,2BAAIR,EAAMQ,WAAiB,KAE9C,6BACI,4BAAQc,KAAK,SAASC,SAAUV,GAAcE,GAA9C,iEAoBDS,eALO,SAACxB,GAAD,MAAY,CAC9ByB,OAAQzB,EAAM0B,MAAMD,OACpBE,GAAQ3B,EAAM0B,MAAMC,MAGgB,CAACvB,uBAA1BoB,EAbH,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,GAAOC,EAAU,+BACnC,OAAGH,EACQ,kBAAC,IAAD,CAAUI,GAAI,YAAYF,IAE1B,kBAAC,EAAcC,M,OChDxBE,E,uKAGE,OAAO,kBAAC,EAAD,CAAOL,OAAQM,KAAK/B,MAAMyB,OAAQjB,UAAWuB,KAAK/B,MAAMQ,gB,GAH/CwB,IAAMC,WAO1BC,EAAiBC,YACjBX,aAAQ,SAACY,GAAD,MAAY,CAACX,OAAQW,EAAMV,MAAMD,OACIjB,UAAW4B,EAAMV,MAAMlB,aAAc,CAACJ,wBAFlE+B,CAEwFL,GAG9FI","file":"static/js/6.fb6ce969.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, } from 'react-final-form';\r\nimport {createCustomField, Input} from \"../../common/formControls/formControls\";\r\nimport {composeValidator, maxLength, requiredField} from \"../../../utilities/validators/validators\";\r\nimport {logInThunkCreator} from \"../../../redux/loginReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nlet requiredMessage = \"Это поле обязательно.\";\r\nlet maxLengthMessage = \"Не больше 10ти символов.\";\r\n\r\n\r\nlet LoginForm = (props) => (<Form\r\n    {...props}\r\n    onSubmit={async s => {\r\n        await props.logInThunkCreator(s.email, s.password, s.rememberme)\r\n        return props.authError;\r\n    }}\r\n    /*validate={c => {\r\n        let errors = {};\r\n        if(c.email&&c.email.length<6) errors.email = \"Email is too short\";\r\n        if(c.password&&c.password.length<10) errors.password = \"Password is to short\";\r\n        return errors;\r\n    }}*/\r\n    validate={()=>{}}\r\n    render={({submitError,\r\n                  handleSubmit,\r\n                  form,\r\n                  submitting,\r\n                  pristine,\r\n                  values}) => {\r\n        return <form onSubmit={handleSubmit}>\r\n\r\n            {createCustomField(\"email\", Input, \"Your email\",\r\n                composeValidator(requiredField(requiredMessage), maxLength(30, maxLengthMessage)))}\r\n\r\n            {createCustomField(\"password\", Input, \"Your password\",\r\n                composeValidator(requiredField(requiredMessage), maxLength(30, maxLengthMessage)), \"password\")}\r\n\r\n            {createCustomField(\"rememberme\", \"input\", null, null, \"checkbox\", \"Запомнить?\")}\r\n            {props.authError ? <p>{props.authError}</p> : null}\r\n            {/*console.log(submitError)*/}\r\n            <div>\r\n                <button type=\"submit\" disabled={submitting || pristine}>Отправить</button>\r\n            </div>\r\n\r\n        </form>\r\n    }}\r\n/>)\r\n\r\nlet Login = ({isAuth, id, ...rest}) => { //меняем (props) на ({isAuth, id, ...rest}, деструктуризируя props)\r\n    if(isAuth) {\r\n        return <Redirect to={\"/profile/\"+id}/>\r\n    } else {\r\n        return <LoginForm {...rest}/>\r\n    };\r\n};\r\n\r\nlet mapStateToProps = (props) => ({\r\n    isAuth: props.login.isAuth,\r\n    id    : props.login.id\r\n});\r\n\r\nexport default connect(mapStateToProps, {logInThunkCreator})(Login);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {logInThunkCreator} from \"../../../redux/loginReducer\";\r\nimport Login from \"./login\";\r\nimport {compose} from \"redux\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    render() {\r\n        return <Login isAuth={this.props.isAuth} authError={this.props.authError}/>\r\n    }\r\n};\r\n\r\nlet LoginContainer = compose(\r\n    connect((state) => ({isAuth: state.login.isAuth,\r\n                                                 authError: state.login.authError,}), {logInThunkCreator}),)(LoginPage);\r\n\r\n\r\nexport default LoginContainer;"],"sourceRoot":""}